@startuml

title __Q's Class Diagram__\n

  namespace game {
    namespace Q {
      class game.Q.QLearning {
          + actionID : int
          + qTable : double[][]
          + saveInd : ArrayList<int[]>
          + stateID : int
          ~ allStates : ArrayList<ArrayList<ELine>>
          ~ availIndex : int
          ~ episilon : double
          ~ gamma : double
          ~ illegalMove : boolean
          ~ lr : double
          ~ reward : double
          ~ winReward : double
          + QLearning()
          + checkAction()
          + checkBox()
          + checkLegal()
          {static} + equals()
          + estimateFuture()
          + init()
          {static} + main()
          + performAction()
          + printQTable()
          + punishQ()
          + punishQForLosingBoxes()
          + readFromFile()
          + resetSaveInd()
          + selectAction()
          + selectAction2()
          + setStateID()
          + setStateID2()
          + turn()
          + unPunishQ()
          + updateQ()
          + writeToFile()
      }
    }
  }
  

  namespace game {
    namespace Q {
      interface game.Q.QLearning.IGenerator {
          {abstract} + stream()
      }
    }
  }
  

  namespace game {
    namespace Q {
      class game.Q.QLearning.SimpleCombinationGenerator {
          ~ combinationLength : int
          ~ originalVector : List<T>
          + iterator()
          + stream()
          ~ SimpleCombinationGenerator()
      }
    }
  }
  

  namespace game {
    namespace Q {
      class game.Q.QLearning.SimpleCombinationIterator {
          - bitVector : int[]
          - currentIndex : long
          - currentSimpleCombination : List<T>
          - endIndex : int
          - generator : SimpleCombinationGenerator<T>
          - lengthK : int
          - lengthN : int
          + hasNext()
          + next()
          + remove()
          + toString()
          ~ SimpleCombinationIterator()
          {static} - setValue()
      }
    }
  }
  

  namespace game {
    namespace Q {
      class game.Q.QLearning2 {
          + actionID : int
          + qTable : double[][]
          + stateID : int
          ~ allStates : ArrayList<ArrayList<ELine>>
          ~ availIndex : int
          ~ episilon : double
          ~ gamma : double
          ~ illegalMove : boolean
          ~ lr : double
          ~ reward : double
          ~ winReward : double
          + QLearning2()
          + checkAction()
          + checkBox()
          + checkLegal()
          {static} + equals()
          + estimateFuture()
          + init()
          {static} + main()
          + performAction()
          + printQTable()
          + punishQ()
          + readFromFile()
          + selectAction()
          + selectAction2()
          + setStateID()
          + setStateID2()
          + turn()
          + updateQ()
          + writeToFile()
      }
    }
  }
  

  namespace game {
    namespace Q {
      interface game.Q.QLearning2.IGenerator {
          {abstract} + stream()
      }
    }
  }
  

  namespace game {
    namespace Q {
      class game.Q.QLearning2.SimpleCombinationGenerator {
          ~ combinationLength : int
          ~ originalVector : List<T>
          + iterator()
          + stream()
          ~ SimpleCombinationGenerator()
      }
    }
  }
  

  namespace game {
    namespace Q {
      class game.Q.QLearning2.SimpleCombinationIterator {
          - bitVector : int[]
          - currentIndex : long
          - currentSimpleCombination : List<T>
          - endIndex : int
          - generator : SimpleCombinationGenerator<T>
          - lengthK : int
          - lengthN : int
          + hasNext()
          + next()
          + remove()
          + toString()
          ~ SimpleCombinationIterator()
          {static} - setValue()
      }
    }
  }
  

  game.Q.QLearning +-down- game.Q.QLearning.IGenerator
  game.Q.QLearning +-down- game.Q.QLearning.SimpleCombinationGenerator
  game.Q.QLearning +-down- game.Q.QLearning.SimpleCombinationIterator
  game.Q.QLearning.SimpleCombinationGenerator .up.|> game.Q.QLearning.IGenerator
  game.Q.QLearning.SimpleCombinationIterator .up.|> java.util.Iterator
  game.Q.QLearning2 +-down- game.Q.QLearning2.IGenerator
  game.Q.QLearning2 +-down- game.Q.QLearning2.SimpleCombinationGenerator
  game.Q.QLearning2 +-down- game.Q.QLearning2.SimpleCombinationIterator
  game.Q.QLearning2.SimpleCombinationGenerator .up.|> game.Q.QLearning2.IGenerator
  game.Q.QLearning2.SimpleCombinationIterator .up.|> java.util.Iterator


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
